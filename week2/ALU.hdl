// This file is part of the materials accompanying the book 
// "The Elements of Computing Systems" by Nisan and Schocken, 
// MIT Press. Book site: www.idc.ac.il/tecs
// File name: projects/02/ALU.hdl

/**
 * The ALU. Computes one of the following functions:
 * x+y, x-y, yâ€“x, 0, 1, -1, x, y, -x, -y, !x, !y,
 * x+1, y+1, x-1, y-1, x&y, x|y on two 16-bit inputs, 
 * according to 6 input bits denoted zx,nx,zy,ny,f,no.
 * The bit-combinations that yield each function are 
 * documented in the book. In addition, the ALU 
 * computes two 1-bit outputs: if the ALU output
 * is 0, zr is set to 1; otherwise zr is set to 0;
 * If out<0, ng is set to 1; otherwise ng is set to 0.
 */

// Implementation: the ALU manipulates the x and y
// inputs and then operates on the resulting values, 
// as follows:
// if (zx==1) set x = 0        // 16-bit constant
// if (nx==1) set x = ~x       // bitwise "not"
// if (zy==1) set y = 0        // 16-bit constant
// if (ny==1) set y = ~y       // bitwise "not"
// if (f==1)  set out = x + y  // integer 2's complement addition
// if (f==0)  set out = x & y  // bitwise "and"
// if (no==1) set out = ~out   // bitwise "not"
// if (out==0) set zr = 1
// if (out<0) set ng = 1

  
CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute  out = x + y (if 1) or out = x & y (if 0)
        no; // negate the out output?

    OUT 
        out[16], // 16-bit output
        zr, // 1 if (out==0), 0 otherwise
        ng; // 1 if (out<0),  0 otherwise

    PARTS:
	
	// negate the X and Y inputs, store result aside
	Not16(in=x, out=Xnegated);
	Not16(in=y, out=Ynegated);
	
	// mux X
	Mux4Way16(a=x , b=false , c=Xnegated, d=true, sel[0]=zx , sel[1]=nx ,out=fx);
	// mux Y
	Mux4Way16(a=y , b=false , c=Ynegated, d=true, sel[0]=zy , sel[1]=ny ,out=fy);
	
	// f=1: x + y, f=0: x & y
	Add16(a=fx, b=fy, out=added);
	And16(a=fx, b=fy, out=anded);
	Mux16(a=anded, b=added, sel=f, out=result);
	
	// negate the output
	Not16(in=result, out=negative);
	// multiplex the output via no
	Mux16(a=result, b=negative, sel=no, out=out, out[0..7]=out7, out[8..15]=out15, out[15]=neg);
	
	// check if the result is vector of zeros
	Or8Way(in=out7 ,out=ok7);
	Or8Way(in=out15 ,out=ok15);
	Or(a=ok7, b=ok15, out=nok);
	Xor(a=nok, b=true, out=zr);
	
	// check if the result is negative
	And(a=neg, b=true, out=ng);
}
